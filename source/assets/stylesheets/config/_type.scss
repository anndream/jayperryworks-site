//  Type config
@import "libs";
@import "paths";

// --- Config & mixins ---

$trebuchet: 'Trebuchet', 'Lucida Grande', 'Verdana', sans-serif;

// default type sizes
$type-size-default: 1rem;

$leading: (
  'tight': 1.2,
  'default': 1.7
);

@function leading($name) {
  @return map-get($leading, $name);
}

// set type to default body size using REMs
// -> useful for resetting type size on a container to override parents
@mixin type-size-default {
  font-size: $type-size-default;
}

// set up viewport-sized fluid type scaling, with minimum and maximum sizes
// -> a modified version of Indrek Paas' fluid type mixin: https://www.sassmeister.com/gist/7f22e44ace49b5124eec
// -> which is based on Mike Riethmuller's formula: https://madebymike.com.au/writing/fluid-type-calc-examples/
// -> also inspired by Eduardo Boucas' mixin: https://eduardoboucas.com/blog/2015/06/18/viewport-sized-typography-with-minimum-and-maximum-sizes.html
@mixin type-fluid($properties: font-size, $size-min: 'eta', $size-max: 'alpha', $screen-min: 'xsmall', $screen-max: 'huge') {

  // set base (min) size as default
  @each $property in $properties {
    #{$property}: scale-type($size-min);
  }

  // start to scale up at the minimum screen size
  @include media('>#{$screen-min}') {
    @each $property in $properties {
      // sass-lint:disable no-duplicate-properties
      // -> using redundant props as fallback here

      // use an in-between value as the fallback where vw units or calc aren't supported
      #{$property}: ((scale-type($size-min) + scale-type($size-max)) / 2);

      // use calc and vw units to make the type scale fluidly between two sizes
      #{$property}: calc(#{scale-type($size-min)} + #{strip-unit(scale-type($size-max) - scale-type($size-min))} * (100vw - #{strip-unit(screen($screen-min))}rem) / #{strip-unit(screen($screen-max) - screen($screen-min))});
    }
  }

  // stop scaling at the maximum screen size
  @include media('>#{$screen-max}') {
    @each $property in $properties {
      #{$property}: scale-type($size-max);
    }
  }
}

// --- Fonts ---
// -> font-face mixins use Bourbon

// headline
@include font-face(
  "publico-headline-normal",
  "#{$asset-path-fonts}/PublicoHeadline-Roman-Web",
  ('ttf', 'woff')
) {
  font-display: swap;
  font-style: normal;
  font-weight: normal;
}

// body
@include font-face(
  "publico-text-normal-normal",
  "#{$asset-path-fonts}/PublicoText-Roman-Web",
  ('ttf', 'woff')
) {
  font-display: swap;
  font-style: normal;
  font-weight: normal;
}
@include font-face(
  "publico-text-normal-italic",
  "#{$asset-path-fonts}/PublicoText-Italic-Web",
  ('ttf', 'woff')
) {
  font-display: swap;
  font-style: italic;
  font-weight: normal;
}

// accent
@include font-face(
  "guardian-sans-light",
  "#{$asset-path-fonts}/GuardianSans-Light-Web",
  ('ttf', 'woff')
) {
  font-display: swap;
  font-style: normal;
  font-weight: normal;
}
@include font-face(
  "guardian-sans-normal",
  "#{$asset-path-fonts}/GuardianSans-Regular-Web",
  ('ttf', 'woff')
) {
  font-display: swap;
  font-style: normal;
  font-weight: normal;
}
@include font-face(
  "guardian-sans-bold",
  "#{$asset-path-fonts}/GuardianSans-Semibold-Web",
  ('ttf', 'woff')
) {
  font-display: swap;
  font-style: normal;
  font-weight: bold;
}


// Font mixins
// -> PUBLIC, use these to style type globally & in modules

// Display
@mixin font-display($important: false) {
  font-family: "publico-headline-normal", $georgia;
  font-weight: normal;
  font-style: normal;
}

// Accent
@mixin font-accent($weight: 'normal', $important: false) {
  font-family: "guardian-sans-#{unquote($weight)}", $trebuchet#{if($important == true, " !important", "")};
  font-weight: if($weight == 'light', normal, unquote($weight));
  font-style: normal;
}

// Body
@mixin font-body($weight: 'normal', $style: 'normal', $important: false) {
  font-family: "publico-text-#{unquote($weight)}-#{unquote($style)}", $georgia#{if($important == true, " !important", "")};
  font-weight: unquote($weight);
  font-style: unquote($style);
}
