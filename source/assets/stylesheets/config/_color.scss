// =============================================================================
//  Global color
// -> refer to colors ONLY via the $theme maps
// =============================================================================

@import 'libs';
@import 'helpers';

// Base Palette
// ----------------------------------------------------------------------
// -> PRIVATE, do not use outside this settings file

// neutrals
$black: #333;
$gray: #b1b1b1;

$lavendar: #7999ec;

// Themes
// ----------------------------------------------------------------------
// -> PUBLIC, use these for color references

// note: highlight is default; variations are assigned in local styles
$themes: (
  'reverse': (
    'text-primary': #fff,
    'text-secondary': lighten($gray, 20),
    'text-tertiary': lighten($black, 35),
    'text-body': $gray,
    'bg': $black,
    'well': darken($black, 20),
    'border': lighten($black, 20),
    'highlight': $lavendar
  ),
  'default': (
    'text-primary': #444,
    'text-secondary': #555,
    'text-tertiary': $gray,
    'text-body': darken($gray, 30),
    'bg': #fff,
    'well': lighten($gray, 20),
    'border': lighten($gray, 20),
    'highlight': $lavendar
  )
);

// --- Helpers & mixins ---
// -> PUBLIC

// getter function to access color map values
// -> PARAMS
//    - STRING/LIST $colors: the name(s) of the color roles, e.g. 'highlight'
//    - STRING $name (optional): the name of the theme, e.g. 'default', 'dark'
//    - NUMBER $grade (optional): 'grade' (as in 'gradation') the color to be darker or lighter
//      -> pass in a negative number to darken the color
//      -> pass in a positive number to lighten the color
// -> PUBLIC
// -> USAGE:
//    - color: color('text-primary');
//    - color: color('highlight' 'primary', 'reverse');
@function color($color, $theme-name: 'default', $grade: 0, $opacity: 1) {
  // first extract the 'theme' nested map
  $theme: map-get($themes, $theme-name);
  // grab the color value from the $themes map
  $value: map-get($theme, $color);

  // lighten or darken the color
  @if ($grade < 0) {
    $value: shade($value, abs($grade));
  }

  @if ($grade > 0) {
    $value: tint($value, abs($grade));
  }

  @if ($opacity < 1) {
    $value: rgba($value, $opacity);
  }

  @return $value;
}

// create default and custom property versions of a color
// -> PUBLIC
// -> USAGE
//    - @include color(background-color, highlight);
@mixin color($prop, $color, $theme: 'default', $important: false) {
  #{$prop}: important(color($color, $theme), $important);
  #{$prop}: important(var(--color-#{$color}), $important);
}

// decorator to set color ('foreground') property
@mixin color-fg($color, $props...) {
  @include color(color, $color, $props...);
}

// decorator to set background-color property
@mixin color-bg($color, $props...) {
  @include color(background-color, $color, $props...);
}

// set up custom properties with the right values for a theme container
// -> PUBLIC
// -> USAGE
//    - body { @include theme('default'); }
@mixin theme($theme, $include-props: false) {

  // create a list of custom properties for each color role in a theme
  // -> e.g. --color-text-primary
  $theme-colors: map-get($themes, $theme);

  @each $name, $color in $theme-colors {
    --color-#{$name}: #{$color};
  }

  // include some background, border, etc. props in the selector?
  // -> use this only for setting defaults. Modifier classes can just redefine the custom properties (e.g. --color-text-primary).
  @if $include-props {
    @include color('background-color', 'bg');
    @include color('border-color', 'border');
    @include color('color', 'text-secondary');

    // highlight color when you select something
    &::selection {
      @include color('background-color', 'highlight');
      @include color('color', 'bg');
      text-shadow: none;
    }
  }
}
