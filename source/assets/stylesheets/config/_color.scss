// =============================================================================
//  Global color
// -> refer to colors ONLY via the $theme maps
// =============================================================================

@import "libs";

// Base Palette
// ----------------------------------------------------------------------
// -> PRIVATE, do not use outside this settings file

// neutrals
$black: #333;
$gray: #b1b1b1;

$lavendar: #7999ec;

// Themes
// ----------------------------------------------------------------------
// -> PUBLIC, use these for color references

// note: highlight is default; variations are assigned in local styles
$themes: (
  'default': (
    'text': (
      'primary': #444,
      'secondary': #555,
      'tertiary': $gray,
      'body': darken($gray, 30),
    ),
    'bg': #fff,
    'well': lighten($gray, 20),
    'border': lighten($gray, 20),
    'highlight': $lavendar
  ),
  'reverse': (
    'text': (
      'primary': #fff,
      'secondary': lighten($gray, 20),
      'tertiary': lighten($black, 35),
      'body': $gray,
    ),
    'bg': $black,
    'well': darken($black, 20),
    'border': lighten($black, 20),
    'highlight': $lavendar
  )
);

$theme-default: (
  'text-primary': #444,
  'text-secondary': #555,
  'text-tertiary': $gray,
  'text-body': darken($gray, 30),
  'bg': white,
  'well': lighten($gray, 20),
  'border': lighten($gray, 20),
  'highlight': $lavendar
);

:root {
  @each $name, $color in $theme-default {
    --color-#{$name}: #{$color};
  }
}

// "get" function to access theme map values
// -> PUBLIC
// -> USAGE:
//      color: theme('text' 'primary');
//      color: theme('highlight', 'reverse');
@function theme($colors, $name: 'default') {
  // first extract the 'theme' nested map
  $theme: map-get($themes, $name);

  // now get the nested map for the first color value
  $color: map-get($theme, nth($colors, 1));

  // if there's more than one color string in the $colors list, dig deeper
  @if length($colors) > 1 {
      @for $i from 2 through length($colors) {
        // keep updating $color with the next nested map until we've reached the end of the list
        $color: map-get($color, nth($colors, $i));
      }
  }
  @return $color;
}

// add colors for each theme
// -> PUBLIC
// -> USAGE:
//      @include color(text primary, background-color);
@mixin color($color, $attr: color, $important: false) {
  // set color for default theme
  #{$attr}: theme($color)#{if($important != false, " !important", "")};

  // set the color of this element to match the theme of this context
  @each $theme, $colors in $themes {
    // @debug($theme);
    @if $theme != "default" {
      // set color to theme of either this element or its parent
      &.c-theme-#{$theme}, .c-theme-#{$theme} & {
        #{$attr}: theme($color, $theme)#{if($important != false, " !important", "")};
      }
    }
  }
}

// Theme Globals
// ----------------------------------------------------------------------
// -> set up helper classes and base colors

@mixin theme($theme) {
  color: theme('text' 'secondary', $theme);
  background-color: theme('bg', $theme);
  border-color: theme('border', $theme) !important;

  // highlight color when you select something
  ::selection {
    background: theme('highlight', $theme);
    color: #fff;
    text-shadow: none;
  }

  // ditto, for mozilla engine
  ::-moz-selection {
    background: theme('highlight', $theme);
    color: #fff;
    text-shadow: none;
  }
}
